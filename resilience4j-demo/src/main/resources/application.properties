spring.application.name=resilience4j-demo
server.port=8030

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# 在刷新周期内，请求的最大频次
resilience4j.ratelimiter.instances.testRateLimiter.limit-for-period=1
# 刷新周期时长
resilience4j.ratelimiter.instances.testRateLimiter.limit-refresh-period=1s
# 线程等待许可的时间，0表示线程不等待则直接抛异常
resilience4j.ratelimiter.instances.testRateLimiter.timeout-duration=0

# 最大并发请求数
resilience4j.bulkhead.instances.testBulkhead.max-concurrent-calls=1
# 仓壁饱和时的最大等待时间，默认0
resilience4j.bulkhead.instances.testBulkhead.max-wait-duration=10ms
# 事件缓冲区大小
resilience4j.bulkhead.instances.testBulkhead.event-consumer-buffer-size=1

# 最大线程池大小
resilience4j.thread-pool-bulkhead.instances.testThreadPoolBulkhead.max-thread-pool-size=1
# 核心线程数
resilience4j.thread-pool-bulkhead.instances.testThreadPoolBulkhead.core-thread-pool-size=1
# 队列容量，默认100
resilience4j.thread-pool-bulkhead.instances.testThreadPoolBulkhead.queue-capacity=10
# 当线程数大于内核数时，多余空闲线程存活时间，默认20ms
resilience4j.thread-pool-bulkhead.instances.testThreadPoolBulkhead.keep-alive-duration=10ms
# 事件缓冲区大小
resilience4j.thread-pool-bulkhead.instances.testThreadPoolBulkhead.event-consumer-buffer-size=100

# 滑动窗口大小，默认100
resilience4j.circuitbreaker.instances.testCircuitBreaker.sliding-window-size=100
# 滑动窗口类型，默认COUNT_BASED
resilience4j.circuitbreaker.instances.testCircuitBreaker.sliding-window-type=COUNT_BASED
# 断路器半开时，允许的请求尝试的个数，默认10
resilience4j.circuitbreaker.instances.testCircuitBreaker.permitted-number-of-calls-in-half-open-state=10
# 启动断路器的最小请求数
resilience4j.circuitbreaker.instances.testCircuitBreaker.minimum-number-of-calls=10
# 断路器从打开切换到半开的时间
resilience4j.circuitbreaker.instances.testCircuitBreaker.wait-duration-in-open-state=60s
# 错误率阈值
resilience4j.circuitbreaker.instances.testCircuitBreaker.failure-rate-threshold=50
# 慢请求率阈值
resilience4j.circuitbreaker.instances.testCircuitBreaker.slow-call-rate-threshold=100
# 慢请求时间阈值
resilience4j.circuitbreaker.instances.testCircuitBreaker.slow-call-duration-threshold=60s
# 记录异常的Predicate，java.util.function.Predicate的实现类
resilience4j.circuitbreaker.instances.testCircuitBreaker.record-failure-predicate=
# 纳入调用失败率统计的异常列表
resilience4j.circuitbreaker.instances.testCircuitBreaker.record-exceptions=java.lang.Exception
# 不会纳入调用失败率统计的异常列表
resilience4j.circuitbreaker.instances.testCircuitBreaker.ignore-exceptions=
# 是否将断路器监控信息注册到/actuator/health
resilience4j.circuitbreaker.instances.testCircuitBreaker.register-health-indicator=true
# 事件缓冲区大小
resilience4j.circuitbreaker.instances.testCircuitBreaker.event-consumer-buffer-size=10

# 最大重试次数，默认3
resilience4j.retry.instances.testRetry.max-attempts=3
# 多次重试的间隔
resilience4j.retry.instances.testRetry.wait-duration=500ms
# 是否开启指数退避，默认false
resilience4j.retry.instances.testRetry.enable-exponential-backoff=true
# 时间间隔乘数，配置enable-exponential-backoff使用
resilience4j.retry.instances.testRetry.exponential-backoff-multiplier=2
# 是否开启随机重试时间
resilience4j.retry.instances.testRetry.enable-randomized-wait=false
# 重试间隔随机因子，配合enable-randomized-wait使用
resilience4j.retry.instances.testRetry.randomized-wait-factor=2
# 记录异常的Predicate，java.util.function.Predicate的实现类
resilience4j.retry.instances.testRetry.retry-exception-predicate=
# 需要重试的异常
resilience4j.retry.instances.testRetry.retry-exceptions=java.lang.Exception
# 不需要重试的异常
resilience4j.retry.instances.testRetry.ignore-exceptions=
# 事件缓冲区大小
resilience4j.retry.instances.testCircuitBreaker.event-consumer-buffer-size=10
